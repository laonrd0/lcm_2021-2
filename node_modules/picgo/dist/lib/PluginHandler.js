"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_spawn_1 = __importDefault(require("cross-spawn"));
class PluginHandler {
    constructor(ctx) {
        this.ctx = ctx;
    }
    async install(plugins, proxy) {
        plugins = plugins.map((item) => 'picgo-plugin-' + item);
        const result = await this.execCommand('install', plugins, this.ctx.baseDir, proxy);
        if (!result.code) {
            this.ctx.log.success('插件安装成功');
            this.ctx.emit('installSuccess', {
                title: '插件安装成功',
                body: plugins
            });
        }
        else {
            const err = `插件安装失败，失败码为${result.code}，错误日志为${result.data}`;
            this.ctx.log.error(err);
            this.ctx.emit('failed', {
                title: '插件安装失败',
                body: err
            });
        }
    }
    async uninstall(plugins) {
        plugins = plugins.map((item) => 'picgo-plugin-' + item);
        const result = await this.execCommand('uninstall', plugins, this.ctx.baseDir);
        if (!result.code) {
            this.ctx.log.success('插件卸载成功');
            this.ctx.emit('uninstallSuccess', {
                title: '插件卸载成功',
                body: plugins
            });
        }
        else {
            const err = `插件卸载失败，失败码为${result.code}，错误日志为${result.data}`;
            this.ctx.log.error(err);
            this.ctx.emit('failed', {
                title: '插件卸载失败',
                body: err
            });
        }
    }
    async update(plugins) {
        plugins = plugins.map((item) => 'picgo-plugin-' + item);
        const result = await this.execCommand('update', plugins, this.ctx.baseDir);
        if (!result.code) {
            this.ctx.log.success('插件更新成功');
            this.ctx.emit('updateSuccess', {
                title: '插件更新成功',
                body: plugins
            });
        }
        else {
            const err = `插件更新失败，失败码为${result.code}，错误日志为${result.data}`;
            this.ctx.log.error(err);
            this.ctx.emit('failed', {
                title: '插件更新失败',
                body: err
            });
        }
    }
    execCommand(cmd, modules, where, proxy = '') {
        const registry = this.ctx.config.registry;
        return new Promise((resolve, reject) => {
            let args = [cmd].concat(modules).concat('--color=always').concat('--save');
            if (registry) {
                args = args.concat(`--registry=${registry}`);
            }
            if (proxy) {
                args = args.concat(`--proxy=${proxy}`);
            }
            const npm = cross_spawn_1.default('npm', args, { cwd: where });
            let output = '';
            npm.stdout.on('data', (data) => {
                output += data;
            }).pipe(process.stdout);
            npm.stderr.on('data', (data) => {
                output += data;
            }).pipe(process.stderr);
            npm.on('close', (code) => {
                if (!code) {
                    resolve({ code: 0, data: output });
                }
                else {
                    reject({ code: code, data: output });
                }
            });
        });
    }
}
exports.default = PluginHandler;
