"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const resolve_1 = __importDefault(require("resolve"));
class PluginLoader {
    constructor(ctx) {
        this.ctx = ctx;
        this.list = [];
        this.init();
    }
    init() {
        const packagePath = path_1.default.join(this.ctx.baseDir, 'package.json');
        if (!fs_extra_1.default.existsSync(packagePath)) {
            const pkg = {
                name: 'picgo-plugins',
                description: 'picgo-plugins',
                repository: 'https://github.com/Molunerfinn/PicGo-Core',
                license: 'MIT'
            };
            fs_extra_1.default.writeFileSync(packagePath, JSON.stringify(pkg), 'utf8');
        }
    }
    // get plugin entry
    resolvePlugin(ctx, name) {
        try {
            return resolve_1.default.sync(name, { basedir: ctx.baseDir });
        }
        catch (err) {
            return path_1.default.join(ctx.baseDir, 'node_modules', name);
        }
    }
    // load all third party plugin
    load() {
        const packagePath = path_1.default.join(this.ctx.baseDir, 'package.json');
        const pluginDir = path_1.default.join(this.ctx.baseDir, 'node_modules/');
        // Thanks to hexo -> https://github.com/hexojs/hexo/blob/master/lib/hexo/load_plugins.js
        if (!fs_extra_1.default.existsSync(pluginDir)) {
            return false;
        }
        const json = fs_extra_1.default.readJSONSync(packagePath);
        const deps = Object.keys(json.dependencies || {});
        const devDeps = Object.keys(json.devDependencies || {});
        const modules = deps.concat(devDeps).filter((name) => {
            if (!/^picgo-plugin-|^@[^/]+\/picgo-plugin-/.test(name))
                return false;
            const path = this.resolvePlugin(this.ctx, name);
            return fs_extra_1.default.existsSync(path);
        });
        for (let i in modules) {
            this.list.push(modules[i]);
            if (this.ctx.config.picgoPlugins[modules[i]] || this.ctx.config.picgoPlugins[modules[i]] === undefined) {
                try {
                    this.getPlugin(modules[i]).register();
                    const plugin = `picgoPlugins[${modules[i]}]`;
                    this.ctx.saveConfig({
                        [plugin]: true
                    });
                }
                catch (e) {
                    this.ctx.log.error(e);
                    this.ctx.emit('notification', {
                        title: `Plugin ${modules[i]} Load Error`,
                        body: e
                    });
                }
            }
        }
    }
    // get plugin by name
    getPlugin(name) {
        const pluginDir = path_1.default.join(this.ctx.baseDir, 'node_modules/');
        return require(pluginDir + name)(this.ctx);
    }
    // get plugin name list
    getList() {
        return this.list;
    }
}
exports.default = PluginLoader;
