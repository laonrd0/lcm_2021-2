"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const dayjs_1 = __importDefault(require("dayjs"));
// Thanks to vs-picgo: https://github.com/Spades-S/vs-picgo/blob/master/src/extension.ts
const getClipboardImage = (ctx) => {
    const imagePath = path_1.default.join(ctx.baseDir, `${dayjs_1.default().format('YYYYMMDDHHmmss')}.png`);
    return new Promise((resolve, reject) => {
        let platform = process.platform;
        let execution = null;
        // for PicGo GUI
        let env = ctx.config.PICGO_ENV === 'GUI';
        const platformPaths = {
            'darwin': env ? path_1.default.join(ctx.baseDir, './mac.applescript') : './clipboard/mac.applescript',
            'win32': env ? path_1.default.join(ctx.baseDir, 'windows.ps1') : './clipboard/windows.ps1',
            'linux': env ? path_1.default.join(ctx.baseDir, 'linux.sh') : './clipboard/linux.sh'
        };
        const scriptPath = env ? platformPaths[platform] : path_1.default.join(__dirname, platformPaths[platform]);
        if (platform === 'darwin') {
            execution = child_process_1.spawn('osascript', [scriptPath, imagePath]);
        }
        else if (platform === 'win32') {
            execution = child_process_1.spawn('powershell', [
                '-noprofile',
                '-noninteractive',
                '-nologo',
                '-sta',
                '-executionpolicy', 'unrestricted',
                '-windowstyle', 'hidden',
                '-file', scriptPath,
                imagePath
            ]);
        }
        else {
            execution = child_process_1.spawn('sh', [scriptPath, imagePath]);
        }
        execution.stdout.on('data', (data) => {
            if (platform === 'linux') {
                if (data.toString().trim() === 'no xclip') {
                    ctx.emit('notification', {
                        title: 'xclip not found',
                        body: 'Please install xclip before run picgo!'
                    });
                }
                else {
                    resolve(data.toString().trim());
                }
            }
            else {
                resolve(data.toString().trim());
            }
        });
        execution.stderr.on('data', (err) => {
            reject(err);
        });
    });
};
exports.default = getClipboardImage;
